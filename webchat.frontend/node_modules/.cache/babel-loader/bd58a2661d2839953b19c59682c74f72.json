{"ast":null,"code":"import _defineProperty from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nexport var LongPollingTransport = /*#__PURE__*/function () {\n  function LongPollingTransport(httpClient, accessTokenFactory, logger, options) {\n    _classCallCheck(this, LongPollingTransport);\n\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  } // This is an internal type, not exported from 'index' so this is really just internal.\n\n\n  _createClass(LongPollingTransport, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, transferFormat) {\n        var _getUserAgentHeader, _getUserAgentHeader2, name, value, headers, pollOptions, token, pollUrl, response;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                Arg.isRequired(url, \"url\");\n                Arg.isRequired(transferFormat, \"transferFormat\");\n                Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n                this._url = url;\n\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n                if (!(transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n\n              case 7:\n                _getUserAgentHeader = getUserAgentHeader(), _getUserAgentHeader2 = _slicedToArray(_getUserAgentHeader, 2), name = _getUserAgentHeader2[0], value = _getUserAgentHeader2[1];\n                headers = _objectSpread(_defineProperty({}, name, value), this._options.headers);\n                pollOptions = {\n                  abortSignal: this._pollAbort.signal,\n                  headers: headers,\n                  timeout: 100000,\n                  withCredentials: this._options.withCredentials\n                };\n\n                if (transferFormat === TransferFormat.Binary) {\n                  pollOptions.responseType = \"arraybuffer\";\n                }\n\n                _context.next = 13;\n                return this._getAccessToken();\n\n              case 13:\n                token = _context.sent;\n\n                this._updateHeaderToken(pollOptions, token); // Make initial long polling request\n                // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n                pollUrl = \"\".concat(url, \"&_=\").concat(Date.now());\n\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \".concat(pollUrl, \".\"));\n\n                _context.next = 19;\n                return this._httpClient.get(pollUrl, pollOptions);\n\n              case 19:\n                response = _context.sent;\n\n                if (response.statusCode !== 200) {\n                  this._logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \".concat(response.statusCode, \".\")); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n                  this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n                  this._running = false;\n                } else {\n                  this._running = true;\n                }\n\n                this._receiving = this._poll(this._url, pollOptions);\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect(_x, _x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"_getAccessToken\",\n    value: function () {\n      var _getAccessToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this._accessTokenFactory) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this._accessTokenFactory();\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n                return _context2.abrupt(\"return\", null);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getAccessToken() {\n        return _getAccessToken2.apply(this, arguments);\n      }\n\n      return _getAccessToken;\n    }()\n  }, {\n    key: \"_updateHeaderToken\",\n    value: function _updateHeaderToken(request, token) {\n      if (!request.headers) {\n        request.headers = {};\n      }\n\n      if (token) {\n        request.headers[HeaderNames.Authorization] = \"Bearer \".concat(token);\n        return;\n      }\n\n      if (request.headers[HeaderNames.Authorization]) {\n        delete request.headers[HeaderNames.Authorization];\n      }\n    }\n  }, {\n    key: \"_poll\",\n    value: function () {\n      var _poll2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url, pollOptions) {\n        var token, pollUrl, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n\n              case 1:\n                if (!this._running) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this._getAccessToken();\n\n              case 4:\n                token = _context3.sent;\n\n                this._updateHeaderToken(pollOptions, token);\n\n                _context3.prev = 6;\n                pollUrl = \"\".concat(url, \"&_=\").concat(Date.now());\n\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \".concat(pollUrl, \".\"));\n\n                _context3.next = 11;\n                return this._httpClient.get(pollUrl, pollOptions);\n\n              case 11:\n                response = _context3.sent;\n\n                if (response.statusCode === 204) {\n                  this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n                  this._running = false;\n                } else if (response.statusCode !== 200) {\n                  this._logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \".concat(response.statusCode, \".\")); // Unexpected status code\n\n\n                  this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n                  this._running = false;\n                } else {\n                  // Process the response\n                  if (response.content) {\n                    this._logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \".concat(getDataDetail(response.content, this._options.logMessageContent), \".\"));\n\n                    if (this.onreceive) {\n                      this.onreceive(response.content);\n                    }\n                  } else {\n                    // This is another way timeout manifest.\n                    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                  }\n                }\n\n                _context3.next = 18;\n                break;\n\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](6);\n\n                if (!this._running) {\n                  // Log but disregard errors that occur after stopping\n                  this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \".concat(_context3.t0.message));\n                } else {\n                  if (_context3.t0 instanceof TimeoutError) {\n                    // Ignore timeouts and reissue the poll.\n                    this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n                  } else {\n                    // Close the connection with the error as the result.\n                    this._closeError = _context3.t0;\n                    this._running = false;\n                  }\n                }\n\n              case 18:\n                _context3.next = 1;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n                // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n                if (!this.pollAborted) {\n                  this._raiseOnClose();\n                }\n\n                return _context3.finish(20);\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0,, 20, 24], [6, 15]]);\n      }));\n\n      function _poll(_x3, _x4) {\n        return _poll2.apply(this, arguments);\n      }\n\n      return _poll;\n    }()\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._running) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", Promise.reject(new Error(\"Cannot send until the transport is connected\")));\n\n              case 2:\n                return _context4.abrupt(\"return\", sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function send(_x5) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var headers, _getUserAgentHeader3, _getUserAgentHeader4, name, value, deleteOptions, token;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n                this._running = false;\n\n                this._pollAbort.abort();\n\n                _context5.prev = 3;\n                _context5.next = 6;\n                return this._receiving;\n\n              case 6:\n                // Send DELETE to clean up long polling on the server\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \".concat(this._url, \".\"));\n\n                headers = {};\n                _getUserAgentHeader3 = getUserAgentHeader(), _getUserAgentHeader4 = _slicedToArray(_getUserAgentHeader3, 2), name = _getUserAgentHeader4[0], value = _getUserAgentHeader4[1];\n                headers[name] = value;\n                deleteOptions = {\n                  headers: _objectSpread({}, headers, this._options.headers),\n                  timeout: this._options.timeout,\n                  withCredentials: this._options.withCredentials\n                };\n                _context5.next = 13;\n                return this._getAccessToken();\n\n              case 13:\n                token = _context5.sent;\n\n                this._updateHeaderToken(deleteOptions, token);\n\n                _context5.next = 17;\n                return this._httpClient.delete(this._url, deleteOptions);\n\n              case 17:\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n\n              case 18:\n                _context5.prev = 18;\n\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n                // It needs to happen after the DELETE request is sent\n\n\n                this._raiseOnClose();\n\n                return _context5.finish(18);\n\n              case 22:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[3,, 18, 22]]);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"_raiseOnClose\",\n    value: function _raiseOnClose() {\n      if (this.onclose) {\n        var logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n        if (this._closeError) {\n          logMessage += \" Error: \" + this._closeError;\n        }\n\n        this._logger.log(LogLevel.Trace, logMessage);\n\n        this.onclose(this._closeError);\n      }\n    }\n  }, {\n    key: \"pollAborted\",\n    get: function get() {\n      return this._pollAbort.aborted;\n    }\n  }]);\n\n  return LongPollingTransport;\n}();","map":null,"metadata":{},"sourceType":"module"}