{"ast":null,"code":"import _classCallCheck from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projetos Dev\\\\WebChat\\\\WebChat\\\\webchat.frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nvar JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\n\nexport var JsonHubProtocol = /*#__PURE__*/function () {\n  function JsonHubProtocol() {\n    _classCallCheck(this, JsonHubProtocol);\n\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n\n    this.version = 1;\n    /** @inheritDoc */\n\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n\n\n  _createClass(JsonHubProtocol, [{\n    key: \"parseMessages\",\n    value: function parseMessages(input, logger) {\n      // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n      if (typeof input !== \"string\") {\n        throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n      }\n\n      if (!input) {\n        return [];\n      }\n\n      if (logger === null) {\n        logger = NullLogger.instance;\n      } // Parse the messages\n\n\n      var messages = TextMessageFormat.parse(input);\n      var hubMessages = [];\n\n      var _iterator = _createForOfIteratorHelper(messages),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var message = _step.value;\n          var parsedMessage = JSON.parse(message);\n\n          if (typeof parsedMessage.type !== \"number\") {\n            throw new Error(\"Invalid payload.\");\n          }\n\n          switch (parsedMessage.type) {\n            case MessageType.Invocation:\n              this._isInvocationMessage(parsedMessage);\n\n              break;\n\n            case MessageType.StreamItem:\n              this._isStreamItemMessage(parsedMessage);\n\n              break;\n\n            case MessageType.Completion:\n              this._isCompletionMessage(parsedMessage);\n\n              break;\n\n            case MessageType.Ping:\n              // Single value, no need to validate\n              break;\n\n            case MessageType.Close:\n              // All optional values, no need to validate\n              break;\n\n            default:\n              // Future protocol changes can add message types, old clients can ignore them\n              logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n              continue;\n          }\n\n          hubMessages.push(parsedMessage);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return hubMessages;\n    }\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\n\n  }, {\n    key: \"writeMessage\",\n    value: function writeMessage(message) {\n      return TextMessageFormat.write(JSON.stringify(message));\n    }\n  }, {\n    key: \"_isInvocationMessage\",\n    value: function _isInvocationMessage(message) {\n      this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n\n      if (message.invocationId !== undefined) {\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n      }\n    }\n  }, {\n    key: \"_isStreamItemMessage\",\n    value: function _isStreamItemMessage(message) {\n      this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n\n      if (message.item === undefined) {\n        throw new Error(\"Invalid payload for StreamItem message.\");\n      }\n    }\n  }, {\n    key: \"_isCompletionMessage\",\n    value: function _isCompletionMessage(message) {\n      if (message.result && message.error) {\n        throw new Error(\"Invalid payload for Completion message.\");\n      }\n\n      if (!message.result && message.error) {\n        this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n      }\n\n      this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n    }\n  }, {\n    key: \"_assertNotEmptyString\",\n    value: function _assertNotEmptyString(value, errorMessage) {\n      if (typeof value !== \"string\" || value === \"\") {\n        throw new Error(errorMessage);\n      }\n    }\n  }]);\n\n  return JsonHubProtocol;\n}();","map":null,"metadata":{},"sourceType":"module"}